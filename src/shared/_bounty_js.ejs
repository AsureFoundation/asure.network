<script>
    'use strict';

    function camelize(str) {
        return str.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
            if (+match === 0) return ""; // or if (/\s+/.test(match)) for white spaces
            return index === 0 ? match.toLowerCase() : match.toUpperCase();
        });
    }

    function AsureStorage() {
        this.STORAGE_KEY = 'ASURE-BOUNTY-STATE';
    }

    AsureStorage.prototype.load = function loadStore() {
        var store = JSON.parse(localStorage.getItem(this.STORAGE_KEY));
        if (!store) {
            store = {
                ethAddr: '',
                toggledCampaings: {}
            }
        }
        return store;
    };

    AsureStorage.prototype.save = function saveStore(store) {
        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(store));
    };

    AsureStorage.prototype.update = function updateStore(updater) {
        var store = this.load();
        updater(store);
        this.save(store);
    };

    function BountyCard(storage) {
        var self = this;

        self.storage = storage;
        self.bountyTasks = window.bountyTasks;
        self.bountyReports = window.bountyReports;

        self.$formEthAddr = $('.form-bounty-eth-addr');
        self.$ethAddr = self.$formEthAddr.find('input');
        self.$check = self.$formEthAddr.find('button');

        self.$check.click(function (evt) {
            evt.preventDefault();
            var ethAddr = self.$ethAddr.val();
            self.storage.update(store => store.ethAddr = ethAddr);
            self.updateBountyReport(ethAddr);
        });

        self.$campaignToggles = $('.form-toggle-campaigns input');

        self.$campaignToggles.change(function () {
            var typeId = $(this).val();
            var isVisible = $(this).is(':checked');

            self.storage.update(store => {
                store.toggledCampaings[typeId] = isVisible;
                self.toggleCampaigns(store.toggledCampaings);
            });
        });

        self.init();
    }

    BountyCard.prototype.init = function init() {
        var store = this.storage.load();

        this.$ethAddr.val(store.ethAddr);


        this.toggleCampaigns(store.toggledCampaings);
        this.updateBountyReport(store.ethAddr);
    };

    BountyCard.prototype.updateBountyReport = function updateBountyReport(ethAddr) {
        var self = this;

        self.resetAllTaskReports();

        if (!ethAddr) {
            return;
        }



        var ethAddrReports = self.bountyReports.data.find(r => r.address === ethAddr);
        if (!ethAddrReports) {
            console.log('No bounty reports for', ethAddr);
            return;
        }

        console.log('Loading bounty reports for', ethAddr);
        var aggregatedReports = self.bountyTasks.map(task => {
            var weekNos = ethAddrReports.weeks
                .filter(week => week.campaigns.hasOwnProperty(task.id) && week.campaigns[task.id].done)
                .map(week => ({weekNo: week.weekNo, parsedWeekNo: week.parsedWeekNo}));

            return { task, weekNos};
        });

        console.log('Found bounty reports', self.bountyReports.data);
        aggregatedReports.forEach(report => self.updateTaskReport(report));
    }

    BountyCard.prototype.toggleCampaigns = function toggleCampaigns(campaigns) {
        var self = this;
        Object.keys(campaigns).forEach(function(typeId) {
            var isVisible = campaigns[typeId];
            var $toggle = self.$campaignToggles.filter('[value=' + typeId + ']');
            var $campaign = $('[data-campaign=' + typeId + ']');

            if (isVisible) {
                $toggle.prop('checked', true);
                $campaign.show();
            } else {
                $toggle.prop('checked', false);
                $campaign.hide();
            }
        })
    }

    BountyCard.prototype.resetAllTaskReports = function() {
        self.bountyTasks.forEach(task => {
            var $task = $('[data-taskid=' + task.id + ']');

            $task.find('.card-header').removeClass('bg-success');
            $task.find('.week-report').each(function () {
                $(this).removeClass('week-report-completed');
            });
        });
    }

    BountyCard.prototype.updateTaskReport = function updateTaskReport(report) {
        var $task = $('[data-taskid=' + report.task.id + ']');

        if (report.weekNos.length > 0) {
            $task.find('.card-header').addClass('bg-success');
        }

        report.weekNos.forEach(weekNo => {
            $task.find('.' + camelize(weekNo.parsedWeekNo)).addClass('week-report-completed');
        });
    };

    $(function () {
        var storage = new AsureStorage();
        var bountyCard = new BountyCard(storage);

        $('.nav-link-goto-participate').on('click', function (e) {
            e.preventDefault()

            $('#tab-info a[href="#participate"]').tab('show');
        })
    });
</script>
